type: edu
custom_name: stage3
files:
- name: test/EncryptDecryptTest.java
  visible: false
  text: |
    import encryptdecrypt.Main;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.SimpleTestCase;

    import java.util.List;

    public class EncryptDecryptTest extends StageTest {
        public EncryptDecryptTest() throws Exception {
            super(Main.class);
        }

        @Override
        public List<SimpleTestCase> generate() {
            return List.of(
                new SimpleTestCase(
                    "enc\n" +
                        "Welcome to hyperskill!\n" +
                        "5",
                    "\\jqhtrj%yt%m~ujwxpnqq&"),
                new SimpleTestCase(
                    "enc\n" +
                        "Hello\n" +
                        "0",
                    "Hello"),
                new SimpleTestCase(
                    "enc\n" +
                        "012345678\n" +
                        "1",
                    "123456789"),
                new SimpleTestCase(
                    "dec\n" +
                        "\\jqhtrj%yt%m~ujwxpnqq&\n" +
                        "5",
                    "Welcome to hyperskill!"),
                new SimpleTestCase(
                    "dec\n" +
                        "Hello\n" +
                        "0",
                    "Hello"),
                new SimpleTestCase(
                    "dec\n" +
                        "222233334444\n" +
                        "1",
                    "111122223333")
            );
        }
    }
  learner_created: false
- name: src/encryptdecrypt/Main.java
  visible: true
  text: |
    package encryptdecrypt;

    import java.util.Scanner;

    public class Main {
        public static void main(String[] args) {
            final Scanner scanner = new Scanner(System.in);
            final String str = scanner.nextLine();
            final int key = scanner.nextInt();

            System.out.println(encodeKeyShift(str, key));
        }

        private static String encodeKeyShift(String str, int key) {
            final char smallA = 'a';
            final char smallZ = 'z';
            final int devider = smallZ - smallA + 1;

            char[] chars = str.toCharArray();
            char[] enChars = new char[chars.length];

            for (int i = 0; i < chars.length; i++) {
                if (chars[i] < smallA || chars[i] > smallZ) {
                    enChars[i] = chars[i];
                } else {
                    enChars[i] = (char) ((chars[i] - smallA + key) % devider + smallA);
                }
            }

            return String.valueOf(enChars);
        }

        private static String encodeReverseShiftFromStartOrEnd(String str) {
            final char smallA = 'a';
            final char smallZ = 'z';
            final char midle = (smallA + smallZ) / 2 + 1;

            char[] chars = str.toCharArray();
            char[] enChars = new char[chars.length];
            for (int i = 0; i < chars.length; i++) {
                if (chars[i] >= smallA && chars[i] <= midle) {
                    enChars[i] = (char) (smallZ - (chars[i] - smallA));
                } else if (chars[i] > midle && chars[i] <= smallZ) {
                    enChars[i] = (char) (smallA + (smallZ - chars[i]));
                } else {
                    enChars[i] = chars[i];
                }
            }

            return String.valueOf(enChars);
        }
    }
  learner_created: true
feedback_link: https://hyperskill.org/projects/46/stages/247/implement
status: Solved
record: 3
